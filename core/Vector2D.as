package core {	/**	 * Clase muy básica que almacena un vector en dos dimensiones	 */	public class Vector2D 	{		public var x:Number;		public var y:Number;				public function Vector2D(initialX:Number = 0, initialY:Number = 0)		{			x = initialX;			y = initialY;		}				/**		 * Retorna la distancia hasta otras coordenadas		 */		public function distanceTo(destination:Vector2D):Number		{			return Math.sqrt(Math.pow(destination.x - x, 2) + Math.pow(destination.y - y, 2));		}						/**		 * Retorna el ángulo hasta otro vector (en radianes)		 */		 public function angleTo(destination:Vector2D):Number		 {			return Math.atan2(this.perpDot(destination), this.dotProduct(destination));		 }				/**		 * Retorna el producto escalar		 */		public function dotProduct(v:Vector2D):Number		{			return x*v.x + y*v.y;		}						public function perpDot(v:Vector2D):Number		{			return x*v.y - y*v.x;		}				/**		 * Le resta "v" a este vector		 */		public function minus(v:Vector2D):void		{			x -= v.x;			y -= v.y;		}				/**		 * Normaliza el vector		 */		public function normalize():void		{			x /= magnitude;			y /= magnitude;		}				/**		 * The vector represented as a string (x, y)		 */		public function toString():String		{      return "(" + x + ", " + y + ")";				}				/**		 * El módulo del vector		 */		public function get magnitude():Number		{			return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));		}	}	}