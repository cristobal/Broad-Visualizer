<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:menu="com.bienvisto.ui.menu.*" 
		 xmlns:view="com.bienvisto.view.*" 
		 xmlns:node="com.bienvisto.ui.node.*"
		 width="100%" height="100%"
		 creationComplete="initComponent(event)" xmlns:topology="com.bienvisto.ui.topology.*" xmlns:sequences="com.bienvisto.ui.sequences.*">
	
	<fx:Script>
		<![CDATA[
			import com.bienvisto.core.events.TimedEvent;
			import com.bienvisto.ui.menu.ProgressTimeSlider;
			
			import flash.utils.getTimer;
			
			import mx.events.FlexEvent;
			
			/**
			 * @private
			 */ 	
			private var resize:Boolean;

			/**
			 * @private
			 */ 
			private var sequencesEnabled:Boolean;
			
			/**
			 * @private
			 */ 
			private var topologyEnabled:Boolean;
			
			/**
			 * @private
			 */ 
			private var localTopologyEnabled:Boolean;
			
			/**
			 * Init component
			 * 
			 * @param event
			 */ 
			private function initComponent(event:FlexEvent):void
			{
				addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);

				playback.addEventListener(ProgressTimeSlider.CHANGE_START, handleProgressSliderChangeStart);
				playback.addEventListener(ProgressTimeSlider.CHANGE_END, handleProgressSliderChangeEnd);
				
	
				playback.addEventListener(ProgressTimeSlider.LOAD_START, handleProgressSliderLoadStart);
				playback.addEventListener(ProgressTimeSlider.LOAD_END, handleProgressSliderLoadEnd);
				
				menu.addEventListener(Menu.SEQUENCES_CLICK, handleSequencesButtonClick);
				menu.addEventListener(Menu.LOCAL_TOPOLOGY_CLICK, handleLocalTopologyButtonClick);
				menu.addEventListener(Menu.TOPOLOGY_CLICK, handleTopologyButtonClick);
				
			}
			
			/**
			 * Set time
			 * 
			 * @param time
			 */ 
			public function setTime(time:uint):void
			{
				nodeWindows.setTime(time);
				playback.setTime(time);
				topologyWindows.setTime(time);
				sequencesWindow.setTime(time);
			}
			
			/**
			 * Set sequences enabled
			 * 
			 * @param value
			 */ 
			public function setSequencesEnabled(value:Boolean):void
			{
				menu.setSequencesEnabled(value);
				sequencesEnabled = value;
			}
			
			/**
			 * Set topology enabled
			 * 
			 * @param value
			 */ 
			public function setTopologyEnabled(value:Boolean):void
			{
				menu.setTopologyEnabled(value);
				topologyEnabled = value;
			}
			
			/**
			 * 
			 */ 
			public function setLocalTopologyEnabled(value:Boolean):void
			{
				menu.setLocalTopologyEnabled(value);
				localTopologyEnabled = value;
			}
			
			/**
			 * @override
			 */ 
			override public function invalidateSize():void
			{
				if (resize){
					if (width != parent.width) {
						width = parent.width;
					}
				
					if (height != parent.height) {
						height = parent.height;
					}
				}
				
				super.invalidateSize();
			}
			
			/**
			 * Handle progress slider change start
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderChangeStart(event:Event):void
			{
				
			}
			
			/**
			 * Handle progress slider change end
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderChangeEnd(event:Event):void
			{
				visualizerView.loaderViewVisible = playback.buffering;
			}
			
			/**
			 * Handle progress slider loading start
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderLoadStart(event:Event):void
			{
				visualizerView.loaderViewVisible = true;
			}
			
			/**
			 * Handle progress slider loading end
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderLoadEnd(event:Event):void
			{
				visualizerView.loaderViewVisible = false;
			}	
			
			/**
			 * Handle added to stage
			 * 
			 * @param event
			 */ 
			private function handleAddedToStage(event:Event):void
			{
				removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				stage.addEventListener(Event.RESIZE, handleResize);
				
				var tt:int = getTimer();
				var frames:int = 0;
				stage.addEventListener(Event.ENTER_FRAME, function(event:Event):void{
					frames++;
					if ((getTimer() - tt) >= 1000) {
						playback.fps.text = "fps: " + frames;
						tt = getTimer();
						frames = 0;
					}
				});
			}
			
			/**
			 * Handle resize
			 * 
			 * @param event
			 */ 
			private function handleResize(event:Event):void
			{
				resize = true;
				invalidateSize();
				resize = false;
			}
			
			/**
			 * Handle sequences button click
			 * 
			 * @param event
			 */ 
			private function handleSequencesButtonClick(event:Event):void
			{
				sequencesWindow.toggle();
			}
			
			/**
			 * Handle local topology button click
			 * 
			 * @param event
			 */ 
			private function handleLocalTopologyButtonClick(event:Event):void
			{
				topologyWindows.localTopologyWindow.toggle();
			}
			
			/**
			 * Handle topology button click
			 * 
			 * @param event
			 */ 
			private function handleTopologyButtonClick(event:Event):void
			{
				// toggle topology window
				topologyWindows.globalTopologyWindow.toggle();
			}
		]]>
	</fx:Script>
	<view:VisualizerView id="visualizerView" />
	
	<!-- Top Menu -->
	<menu:Menu id="menu" top="0" width="100%" height="60"  />	

	<!-- Playback Controller -->
	<menu:Playback id="playback" bottom="0" width="100%" height="50" />
	
	<!-- TopologyWindow -->
	<topology:TopologyWindows id="topologyWindows" right="10" top="40" />
	
	<!-- SequencesWindow -->
	<sequences:SequencesWindow id="sequencesWindow" left="10" bottom="60" />
	
	<!-- Node windows -->
	<node:NodeWindows id="nodeWindows" right="10" bottom="60" />
</s:Group>
