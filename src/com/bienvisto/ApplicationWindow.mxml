<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:menus="com.bienvisto.ui.menus.*" 
		 xmlns:view="com.bienvisto.view.*" 
		 xmlns:node="com.bienvisto.ui.windows.node.*"
		 xmlns:topology="com.bienvisto.ui.windows.topology.*" 
		 xmlns:sequences="com.bienvisto.ui.windows.sequences.*"
		 width="100%" height="100%"
		 creationComplete="initComponent(event)">
	
	<fx:Script>
		<![CDATA[
			import com.bienvisto.core.events.TimedEvent;
			import com.bienvisto.ui.menus.ProgressTimeSlider;
			import com.bienvisto.ui.windows.charts.ChartsWindows;
			import com.bienvisto.ui.windows.node.NodeWindows;
			import com.bienvisto.ui.windows.sequences.SequencesWindow;
			import com.bienvisto.ui.windows.topology.TopologyWindows;
			
			import flash.utils.getTimer;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			/**
			 * ApplicationWindow.mxml
			 * 
			 * @author Cristobal Dabed
			 */			
			
			//--------------------------------------------------------------------------
			//
			//  Initialization
			//
			//--------------------------------------------------------------------------
			
			/**
			 * Init component
			 * 
			 * @param event
			 */ 
			private function initComponent(event:FlexEvent):void
			{
				initComponents();
				bindComponents();
			}
			
			/**
			 * Init components
			 */ 
			private function initComponents():void
			{
				_chartsWindows   = new ChartsWindows(this);
				_nodeWindows     = new NodeWindows(this);
				_topologyWindows = new TopologyWindows(this);
				
				// setup sequences window
				_sequencesWindow = new SequencesWindow();
				_sequencesWindow.setInitialPosition("", 10, 400, "");
				_sequencesWindow.visible = false;
				addElement(_sequencesWindow);
			}
			
			/**
			 * Bind components
			 */ 
			private function bindComponents():void
			{
				addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				
				// playback events
				playback.addEventListener(ProgressTimeSlider.CHANGE_START, handleProgressSliderChangeStart);
				playback.addEventListener(ProgressTimeSlider.CHANGE_END, handleProgressSliderChangeEnd);
				playback.addEventListener(ProgressTimeSlider.LOAD_START, handleProgressSliderLoadStart);
				playback.addEventListener(ProgressTimeSlider.LOAD_END, handleProgressSliderLoadEnd);
				
				// menu events
				menu.addEventListener(Menu.STATS_CLICK, handleMenuStatsButtonClick);
				menu.addEventListener(Menu.SEQUENCES_CLICK, handleMenuSequencesButtonClick);
				menu.addEventListener(Menu.LOCAL_TOPOLOGY_CLICK, handleMenuLocalTopologyButtonClick);
				menu.addEventListener(Menu.TOPOLOGY_CLICK, handleMenuTopologyButtonClick);
			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			
			/**
			 * @private
			 */ 
			private var duration:uint;
			
			/**
			 * @private
			 */ 	
			private var resize:Boolean;

			/**
			 * @private
			 */ 
			private var _chartsWindows:ChartsWindows;
			
			/**
			 * @readonly chartsWindows
			 */ 
			public function get chartsWindows():ChartsWindows
			{
				return _chartsWindows;
			}
			
			/**
			 * @private
			 */ 
			private var _nodeWindows:NodeWindows;
			
			/**
			 * @readonly nodeWindows
			 */ 
			public function get nodeWindows():NodeWindows
			{
				return _nodeWindows;
			}
			
			/**
			 * @private
			 */ 
			private var _sequencesWindow:SequencesWindow;
			
			/**
			 * @readonly sequencesWindow
			 */ 
			public function get sequencesWindow():SequencesWindow
			{
				return _sequencesWindow;
			}
			
			/**
			 * @private
			 */ 
			private var _topologyWindows:TopologyWindows;
			
			/**
			 * @readonly topologyWindows
			 */ 
			public function get topologyWindows():TopologyWindows
			{
				return _topologyWindows;
			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 * Set time
			 * 
			 * @param time
			 */ 
			public function setTime(time:uint):void
			{
				_nodeWindows.setTime(time);
				playback.setTime(time);
				topologyWindows.setTime(time);
				sequencesWindow.setTime(time);
				chartsWindows.setTime(time);
			}
			
			/**
			 * Set duration
			 */ 
			public function setDuration(duration:uint):void
			{
				playback.setDuration(duration);
				chartsWindows.setDuration(duration);
			}
			
			/**
			 * Set loaded
			 */ 
			public function setLoaded(value:Number):void
			{
				playback.setLoaded(value);
			}
			
			/**
			 * Set sequences enabled
			 * 
			 * @param value
			 */ 
			public function setSequencesEnabled(value:Boolean):void
			{
				menu.setSequencesEnabled(value);
			}
			
			/**
			 * Set topology enabled
			 * 
			 * @param value
			 */ 
			public function setTopologyEnabled(value:Boolean):void
			{
				menu.setTopologyEnabled(value);
			}
			
			/**
			 * Set local topolgy enabled
			 * 
			 * @param value
			 */ 
			public function setLocalTopologyEnabled(value:Boolean):void
			{
				menu.setLocalTopologyEnabled(value);
			}
			
			/**
			 * Set perimeter view enabled
			 * 
			 * @param value
			 */ 
			public function setPerimeterViewEnabled(value:Boolean):void
			{
				playback.setPerimeterViewEnabled(value);
			}
			
			
			/**
			 * @override
			 */ 
			override public function invalidateSize():void
			{
				if (resize){
					if (width != parent.width) {
						width = parent.width;
					}
				
					if (height != parent.height) {
						height = parent.height;
					}
				}
				
				super.invalidateSize();
			}
			
			/**
			 * Handle resize
			 * 
			 * @param event
			 */ 
			private function handleResize(event:Event):void
			{
				resize = true;
				invalidateSize();
				resize = false;
			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Playback progress events
			//
			//--------------------------------------------------------------------------
			
			/**
			 * Handle progress slider change start
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderChangeStart(event:Event):void
			{
				
			}
			
			/**
			 * Handle progress slider change end
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderChangeEnd(event:Event):void
			{
				visualizerView.loaderViewVisible = playback.buffering;
			}
			
			/**
			 * Handle progress slider loading start
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderLoadStart(event:Event):void
			{
				visualizerView.loaderViewVisible = true;
			}
			
			/**
			 * Handle progress slider loading end
			 * 
			 * @param event
			 */ 
			private function handleProgressSliderLoadEnd(event:Event):void
			{
				visualizerView.loaderViewVisible = false;
			}	
			
			/**
			 * Handle added to stage
			 * 
			 * @param event
			 */ 
			private function handleAddedToStage(event:Event):void
			{
				removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				stage.addEventListener(Event.RESIZE, handleResize);
			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Menu Buttons Events
			//
			//--------------------------------------------------------------------------
			
			/**
			 * Handle menu stats button click
			 * 
			 * @param event
			 */ 
			private function handleMenuStatsButtonClick(event:Event):void
			{
				chartsWindows.add();
			}
			
			/**
			 * Handle menu sequences button click
			 * 
			 * @param event
			 */ 
			private function handleMenuSequencesButtonClick(event:Event):void
			{
				sequencesWindow.toggle();
			}
			
			/**
			 * Handle menu local topology button click
			 * 
			 * @param event
			 */ 
			private function handleMenuLocalTopologyButtonClick(event:Event):void
			{
				topologyWindows.localTopologyWindow.toggle();
			}
			
			/**
			 * Handle menu topology button click
			 * 
			 * @param event
			 */ 
			private function handleMenuTopologyButtonClick(event:Event):void
			{
				// toggle topology window
				topologyWindows.globalTopologyWindow.toggle();
			}
			
		]]>
	</fx:Script>
	<view:VisualizerView id="visualizerView" />
	
	<!-- Top Menu -->
	<menus:Menu id="menu" top="0" width="100%" height="60"  />	

	<!-- Playback Controller -->
	<menus:Playback id="playback" bottom="0" width="100%" height="50" />
	
</s:Group>
